{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d1fbe006-4527-4ed2-b7ae-d0aba6ce433e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-15 16:38:50.412138: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1/200\n",
      "train loss: 2.3551, train accuracy: 11.70%\n",
      "test loss: 2.3786, test accuracy: 15.00%\n",
      "------------------------------\n",
      "epoch 2/200\n",
      "train loss: 2.3005, train accuracy: 11.70%\n",
      "test loss: 2.2893, test accuracy: 15.00%\n",
      "------------------------------\n",
      "epoch 3/200\n",
      "train loss: 2.2957, train accuracy: 10.00%\n",
      "test loss: 2.2811, test accuracy: 11.00%\n",
      "------------------------------\n",
      "epoch 4/200\n",
      "train loss: 2.2922, train accuracy: 11.70%\n",
      "test loss: 2.2744, test accuracy: 14.00%\n",
      "------------------------------\n",
      "epoch 5/200\n",
      "train loss: 2.2884, train accuracy: 11.60%\n",
      "test loss: 2.2740, test accuracy: 14.00%\n",
      "------------------------------\n",
      "epoch 6/200\n",
      "train loss: 2.2833, train accuracy: 11.20%\n",
      "test loss: 2.2661, test accuracy: 12.00%\n",
      "------------------------------\n",
      "epoch 7/200\n",
      "train loss: 2.2762, train accuracy: 11.70%\n",
      "test loss: 2.2610, test accuracy: 15.00%\n",
      "------------------------------\n",
      "epoch 8/200\n",
      "train loss: 2.2657, train accuracy: 11.70%\n",
      "test loss: 2.2546, test accuracy: 15.00%\n",
      "------------------------------\n",
      "epoch 9/200\n",
      "train loss: 2.2467, train accuracy: 12.70%\n",
      "test loss: 2.2388, test accuracy: 16.00%\n",
      "------------------------------\n",
      "epoch 10/200\n",
      "train loss: 2.2030, train accuracy: 15.60%\n",
      "test loss: 2.2029, test accuracy: 18.00%\n",
      "------------------------------\n",
      "epoch 11/200\n",
      "train loss: 2.0044, train accuracy: 40.70%\n",
      "test loss: 2.0103, test accuracy: 37.00%\n",
      "------------------------------\n",
      "epoch 12/200\n",
      "train loss: 1.3675, train accuracy: 63.00%\n",
      "test loss: 1.4251, test accuracy: 54.00%\n",
      "------------------------------\n",
      "epoch 13/200\n",
      "train loss: 0.9564, train accuracy: 73.00%\n",
      "test loss: 1.0038, test accuracy: 71.00%\n",
      "------------------------------\n",
      "epoch 14/200\n",
      "train loss: 0.8765, train accuracy: 75.90%\n",
      "test loss: 1.0022, test accuracy: 71.00%\n",
      "------------------------------\n",
      "epoch 15/200\n",
      "train loss: 0.8757, train accuracy: 75.40%\n",
      "test loss: 0.9596, test accuracy: 73.00%\n",
      "------------------------------\n",
      "epoch 16/200\n",
      "train loss: 0.6873, train accuracy: 78.80%\n",
      "test loss: 0.7252, test accuracy: 75.00%\n",
      "------------------------------\n",
      "epoch 17/200\n",
      "train loss: 0.5153, train accuracy: 85.80%\n",
      "test loss: 0.6033, test accuracy: 84.00%\n",
      "------------------------------\n",
      "epoch 18/200\n",
      "train loss: 0.9527, train accuracy: 76.30%\n",
      "test loss: 1.0724, test accuracy: 76.00%\n",
      "------------------------------\n",
      "epoch 19/200\n",
      "train loss: 0.4572, train accuracy: 86.60%\n",
      "test loss: 0.5558, test accuracy: 83.00%\n",
      "------------------------------\n",
      "epoch 20/200\n",
      "train loss: 0.5823, train accuracy: 81.50%\n",
      "test loss: 0.6074, test accuracy: 77.00%\n",
      "------------------------------\n",
      "epoch 21/200\n",
      "train loss: 0.4847, train accuracy: 85.90%\n",
      "test loss: 0.5972, test accuracy: 77.00%\n",
      "------------------------------\n",
      "epoch 22/200\n",
      "train loss: 0.5316, train accuracy: 83.50%\n",
      "test loss: 0.5721, test accuracy: 82.00%\n",
      "------------------------------\n",
      "epoch 23/200\n",
      "train loss: 0.5859, train accuracy: 79.00%\n",
      "test loss: 0.6416, test accuracy: 76.00%\n",
      "------------------------------\n",
      "epoch 24/200\n",
      "train loss: 0.4370, train accuracy: 86.40%\n",
      "test loss: 0.4685, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 25/200\n",
      "train loss: 0.3754, train accuracy: 89.20%\n",
      "test loss: 0.4337, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 26/200\n",
      "train loss: 0.4694, train accuracy: 84.30%\n",
      "test loss: 0.5273, test accuracy: 81.00%\n",
      "------------------------------\n",
      "epoch 27/200\n",
      "train loss: 0.3347, train accuracy: 90.50%\n",
      "test loss: 0.4068, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 28/200\n",
      "train loss: 0.3512, train accuracy: 89.10%\n",
      "test loss: 0.3914, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 29/200\n",
      "train loss: 0.3737, train accuracy: 89.10%\n",
      "test loss: 0.4190, test accuracy: 83.00%\n",
      "------------------------------\n",
      "epoch 30/200\n",
      "train loss: 0.4749, train accuracy: 85.60%\n",
      "test loss: 0.4911, test accuracy: 84.00%\n",
      "------------------------------\n",
      "epoch 31/200\n",
      "train loss: 0.3453, train accuracy: 88.80%\n",
      "test loss: 0.3839, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 32/200\n",
      "train loss: 0.3137, train accuracy: 90.80%\n",
      "test loss: 0.3608, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 33/200\n",
      "train loss: 0.3047, train accuracy: 91.70%\n",
      "test loss: 0.3864, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 34/200\n",
      "train loss: 0.4122, train accuracy: 86.90%\n",
      "test loss: 0.4518, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 35/200\n",
      "train loss: 0.3035, train accuracy: 91.50%\n",
      "test loss: 0.3326, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 36/200\n",
      "train loss: 0.3279, train accuracy: 90.20%\n",
      "test loss: 0.3456, test accuracy: 91.00%\n",
      "------------------------------\n",
      "epoch 37/200\n",
      "train loss: 0.3148, train accuracy: 90.70%\n",
      "test loss: 0.4064, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 38/200\n",
      "train loss: 0.2800, train accuracy: 91.90%\n",
      "test loss: 0.3304, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 39/200\n",
      "train loss: 0.3346, train accuracy: 89.10%\n",
      "test loss: 0.3791, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 40/200\n",
      "train loss: 0.2775, train accuracy: 91.30%\n",
      "test loss: 0.3032, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 41/200\n",
      "train loss: 0.2760, train accuracy: 92.30%\n",
      "test loss: 0.3293, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 42/200\n",
      "train loss: 0.2609, train accuracy: 92.70%\n",
      "test loss: 0.3056, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 43/200\n",
      "train loss: 0.2532, train accuracy: 92.80%\n",
      "test loss: 0.2895, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 44/200\n",
      "train loss: 0.2826, train accuracy: 91.40%\n",
      "test loss: 0.3288, test accuracy: 84.00%\n",
      "------------------------------\n",
      "epoch 45/200\n",
      "train loss: 0.2427, train accuracy: 92.90%\n",
      "test loss: 0.2948, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 46/200\n",
      "train loss: 0.2542, train accuracy: 92.70%\n",
      "test loss: 0.3228, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 47/200\n",
      "train loss: 0.2629, train accuracy: 93.00%\n",
      "test loss: 0.3641, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 48/200\n",
      "train loss: 0.6285, train accuracy: 84.90%\n",
      "test loss: 0.6445, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 49/200\n",
      "train loss: 0.2337, train accuracy: 93.80%\n",
      "test loss: 0.3011, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 50/200\n",
      "train loss: 0.2406, train accuracy: 93.00%\n",
      "test loss: 0.3139, test accuracy: 91.00%\n",
      "------------------------------\n",
      "epoch 51/200\n",
      "train loss: 0.2216, train accuracy: 93.80%\n",
      "test loss: 0.2833, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 52/200\n",
      "train loss: 0.2513, train accuracy: 92.50%\n",
      "test loss: 0.2980, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 53/200\n",
      "train loss: 0.3231, train accuracy: 90.30%\n",
      "test loss: 0.4219, test accuracy: 83.00%\n",
      "------------------------------\n",
      "epoch 54/200\n",
      "train loss: 0.2262, train accuracy: 93.80%\n",
      "test loss: 0.3018, test accuracy: 91.00%\n",
      "------------------------------\n",
      "epoch 55/200\n",
      "train loss: 0.2121, train accuracy: 94.20%\n",
      "test loss: 0.2946, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 56/200\n",
      "train loss: 0.2310, train accuracy: 93.50%\n",
      "test loss: 0.3352, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 57/200\n",
      "train loss: 0.2488, train accuracy: 92.90%\n",
      "test loss: 0.3390, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 58/200\n",
      "train loss: 0.2095, train accuracy: 94.10%\n",
      "test loss: 0.2983, test accuracy: 91.00%\n",
      "------------------------------\n",
      "epoch 59/200\n",
      "train loss: 0.3382, train accuracy: 90.00%\n",
      "test loss: 0.3924, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 60/200\n",
      "train loss: 0.2101, train accuracy: 94.40%\n",
      "test loss: 0.3195, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 61/200\n",
      "train loss: 0.2047, train accuracy: 94.50%\n",
      "test loss: 0.2983, test accuracy: 91.00%\n",
      "------------------------------\n",
      "epoch 62/200\n",
      "train loss: 0.1901, train accuracy: 95.10%\n",
      "test loss: 0.2905, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 63/200\n",
      "train loss: 0.2195, train accuracy: 93.80%\n",
      "test loss: 0.3325, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 64/200\n",
      "train loss: 0.2208, train accuracy: 93.50%\n",
      "test loss: 0.3392, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 65/200\n",
      "train loss: 0.2187, train accuracy: 92.40%\n",
      "test loss: 0.3134, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 66/200\n",
      "train loss: 0.1856, train accuracy: 95.50%\n",
      "test loss: 0.2910, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 67/200\n",
      "train loss: 0.2001, train accuracy: 94.60%\n",
      "test loss: 0.3126, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 68/200\n",
      "train loss: 0.2069, train accuracy: 93.60%\n",
      "test loss: 0.2908, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 69/200\n",
      "train loss: 0.1925, train accuracy: 94.90%\n",
      "test loss: 0.2934, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 70/200\n",
      "train loss: 0.2175, train accuracy: 94.00%\n",
      "test loss: 0.3386, test accuracy: 84.00%\n",
      "------------------------------\n",
      "epoch 71/200\n",
      "train loss: 0.2107, train accuracy: 94.20%\n",
      "test loss: 0.3259, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 72/200\n",
      "train loss: 0.1896, train accuracy: 94.90%\n",
      "test loss: 0.3070, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 73/200\n",
      "train loss: 0.1749, train accuracy: 95.20%\n",
      "test loss: 0.2770, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 74/200\n",
      "train loss: 0.1761, train accuracy: 95.40%\n",
      "test loss: 0.2954, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 75/200\n",
      "train loss: 0.1702, train accuracy: 95.50%\n",
      "test loss: 0.2887, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 76/200\n",
      "train loss: 0.1952, train accuracy: 94.10%\n",
      "test loss: 0.3327, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 77/200\n",
      "train loss: 0.1940, train accuracy: 94.10%\n",
      "test loss: 0.3272, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 78/200\n",
      "train loss: 0.1786, train accuracy: 94.80%\n",
      "test loss: 0.2997, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 79/200\n",
      "train loss: 0.1784, train accuracy: 95.30%\n",
      "test loss: 0.3219, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 80/200\n",
      "train loss: 0.2100, train accuracy: 93.20%\n",
      "test loss: 0.3628, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 81/200\n",
      "train loss: 0.1848, train accuracy: 94.60%\n",
      "test loss: 0.2981, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 82/200\n",
      "train loss: 0.1700, train accuracy: 95.70%\n",
      "test loss: 0.3071, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 83/200\n",
      "train loss: 0.1670, train accuracy: 95.90%\n",
      "test loss: 0.2909, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 84/200\n",
      "train loss: 0.1671, train accuracy: 95.20%\n",
      "test loss: 0.2900, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 85/200\n",
      "train loss: 0.1652, train accuracy: 95.60%\n",
      "test loss: 0.3011, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 86/200\n",
      "train loss: 0.1558, train accuracy: 95.90%\n",
      "test loss: 0.2993, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 87/200\n",
      "train loss: 0.1707, train accuracy: 95.30%\n",
      "test loss: 0.3097, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 88/200\n",
      "train loss: 0.1674, train accuracy: 95.70%\n",
      "test loss: 0.3081, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 89/200\n",
      "train loss: 0.1500, train accuracy: 96.00%\n",
      "test loss: 0.2854, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 90/200\n",
      "train loss: 0.1700, train accuracy: 94.30%\n",
      "test loss: 0.2884, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 91/200\n",
      "train loss: 0.1690, train accuracy: 94.40%\n",
      "test loss: 0.2836, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 92/200\n",
      "train loss: 0.1544, train accuracy: 95.50%\n",
      "test loss: 0.2896, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 93/200\n",
      "train loss: 0.1478, train accuracy: 96.20%\n",
      "test loss: 0.2882, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 94/200\n",
      "train loss: 0.1658, train accuracy: 95.20%\n",
      "test loss: 0.3260, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 95/200\n",
      "train loss: 0.1581, train accuracy: 95.50%\n",
      "test loss: 0.2930, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 96/200\n",
      "train loss: 0.1461, train accuracy: 96.10%\n",
      "test loss: 0.2939, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 97/200\n",
      "train loss: 0.1847, train accuracy: 94.30%\n",
      "test loss: 0.3749, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 98/200\n",
      "train loss: 0.1581, train accuracy: 95.80%\n",
      "test loss: 0.3085, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 99/200\n",
      "train loss: 0.1477, train accuracy: 96.00%\n",
      "test loss: 0.3118, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 100/200\n",
      "train loss: 0.1547, train accuracy: 96.10%\n",
      "test loss: 0.2860, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 101/200\n",
      "train loss: 0.1471, train accuracy: 95.40%\n",
      "test loss: 0.3015, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 102/200\n",
      "train loss: 0.1624, train accuracy: 95.20%\n",
      "test loss: 0.3267, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 103/200\n",
      "train loss: 0.1321, train accuracy: 96.80%\n",
      "test loss: 0.2853, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 104/200\n",
      "train loss: 0.1316, train accuracy: 96.60%\n",
      "test loss: 0.2776, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 105/200\n",
      "train loss: 0.1402, train accuracy: 96.10%\n",
      "test loss: 0.2949, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 106/200\n",
      "train loss: 0.1398, train accuracy: 96.50%\n",
      "test loss: 0.2827, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 107/200\n",
      "train loss: 0.1559, train accuracy: 95.80%\n",
      "test loss: 0.3010, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 108/200\n",
      "train loss: 0.1697, train accuracy: 95.00%\n",
      "test loss: 0.3305, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 109/200\n",
      "train loss: 0.1435, train accuracy: 95.80%\n",
      "test loss: 0.3296, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 110/200\n",
      "train loss: 0.1274, train accuracy: 96.90%\n",
      "test loss: 0.3094, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 111/200\n",
      "train loss: 0.1799, train accuracy: 94.50%\n",
      "test loss: 0.3833, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 112/200\n",
      "train loss: 0.1442, train accuracy: 96.30%\n",
      "test loss: 0.2748, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 113/200\n",
      "train loss: 0.1785, train accuracy: 95.20%\n",
      "test loss: 0.3442, test accuracy: 83.00%\n",
      "------------------------------\n",
      "epoch 114/200\n",
      "train loss: 0.1348, train accuracy: 96.20%\n",
      "test loss: 0.3222, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 115/200\n",
      "train loss: 0.1285, train accuracy: 96.70%\n",
      "test loss: 0.2871, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 116/200\n",
      "train loss: 0.1192, train accuracy: 97.20%\n",
      "test loss: 0.2838, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 117/200\n",
      "train loss: 0.1396, train accuracy: 96.60%\n",
      "test loss: 0.3221, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 118/200\n",
      "train loss: 0.1415, train accuracy: 96.00%\n",
      "test loss: 0.3173, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 119/200\n",
      "train loss: 0.2052, train accuracy: 93.90%\n",
      "test loss: 0.4167, test accuracy: 81.00%\n",
      "------------------------------\n",
      "epoch 120/200\n",
      "train loss: 0.1401, train accuracy: 96.20%\n",
      "test loss: 0.3232, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 121/200\n",
      "train loss: 0.1170, train accuracy: 97.60%\n",
      "test loss: 0.2912, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 122/200\n",
      "train loss: 0.1202, train accuracy: 97.60%\n",
      "test loss: 0.2872, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 123/200\n",
      "train loss: 0.1255, train accuracy: 96.50%\n",
      "test loss: 0.3029, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 124/200\n",
      "train loss: 0.1533, train accuracy: 95.30%\n",
      "test loss: 0.3539, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 125/200\n",
      "train loss: 0.1184, train accuracy: 97.80%\n",
      "test loss: 0.2946, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 126/200\n",
      "train loss: 0.1288, train accuracy: 97.10%\n",
      "test loss: 0.2974, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 127/200\n",
      "train loss: 0.1265, train accuracy: 96.90%\n",
      "test loss: 0.2979, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 128/200\n",
      "train loss: 0.1193, train accuracy: 97.30%\n",
      "test loss: 0.3042, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 129/200\n",
      "train loss: 0.1235, train accuracy: 97.20%\n",
      "test loss: 0.3025, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 130/200\n",
      "train loss: 0.1148, train accuracy: 97.30%\n",
      "test loss: 0.3090, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 131/200\n",
      "train loss: 0.1246, train accuracy: 97.10%\n",
      "test loss: 0.2928, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 132/200\n",
      "train loss: 0.1170, train accuracy: 97.10%\n",
      "test loss: 0.2724, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 133/200\n",
      "train loss: 0.1099, train accuracy: 97.80%\n",
      "test loss: 0.3014, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 134/200\n",
      "train loss: 0.1314, train accuracy: 96.60%\n",
      "test loss: 0.3076, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 135/200\n",
      "train loss: 0.1308, train accuracy: 96.90%\n",
      "test loss: 0.3112, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 136/200\n",
      "train loss: 0.1480, train accuracy: 95.70%\n",
      "test loss: 0.3804, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 137/200\n",
      "train loss: 0.1118, train accuracy: 97.20%\n",
      "test loss: 0.3105, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 138/200\n",
      "train loss: 0.1100, train accuracy: 97.70%\n",
      "test loss: 0.3099, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 139/200\n",
      "train loss: 0.1209, train accuracy: 96.90%\n",
      "test loss: 0.3438, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 140/200\n",
      "train loss: 0.1110, train accuracy: 97.30%\n",
      "test loss: 0.3003, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 141/200\n",
      "train loss: 0.1083, train accuracy: 97.40%\n",
      "test loss: 0.2993, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 142/200\n",
      "train loss: 0.1085, train accuracy: 97.70%\n",
      "test loss: 0.3172, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 143/200\n",
      "train loss: 0.1161, train accuracy: 97.10%\n",
      "test loss: 0.3133, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 144/200\n",
      "train loss: 0.1034, train accuracy: 97.60%\n",
      "test loss: 0.2900, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 145/200\n",
      "train loss: 0.1049, train accuracy: 97.40%\n",
      "test loss: 0.2963, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 146/200\n",
      "train loss: 0.1026, train accuracy: 98.30%\n",
      "test loss: 0.3056, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 147/200\n",
      "train loss: 0.1008, train accuracy: 97.90%\n",
      "test loss: 0.2950, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 148/200\n",
      "train loss: 0.1091, train accuracy: 97.90%\n",
      "test loss: 0.3385, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 149/200\n",
      "train loss: 0.1097, train accuracy: 97.40%\n",
      "test loss: 0.3421, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 150/200\n",
      "train loss: 0.1249, train accuracy: 96.50%\n",
      "test loss: 0.3460, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 151/200\n",
      "train loss: 0.1135, train accuracy: 97.00%\n",
      "test loss: 0.3440, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 152/200\n",
      "train loss: 0.1262, train accuracy: 96.30%\n",
      "test loss: 0.3036, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 153/200\n",
      "train loss: 0.1145, train accuracy: 96.50%\n",
      "test loss: 0.3250, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 154/200\n",
      "train loss: 0.2194, train accuracy: 93.10%\n",
      "test loss: 0.4569, test accuracy: 77.00%\n",
      "------------------------------\n",
      "epoch 155/200\n",
      "train loss: 0.1088, train accuracy: 96.70%\n",
      "test loss: 0.3501, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 156/200\n",
      "train loss: 0.1011, train accuracy: 98.00%\n",
      "test loss: 0.3217, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 157/200\n",
      "train loss: 0.0963, train accuracy: 98.20%\n",
      "test loss: 0.3109, test accuracy: 90.00%\n",
      "------------------------------\n",
      "epoch 158/200\n",
      "train loss: 0.1017, train accuracy: 97.40%\n",
      "test loss: 0.3271, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 159/200\n",
      "train loss: 0.0955, train accuracy: 98.20%\n",
      "test loss: 0.3112, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 160/200\n",
      "train loss: 0.0951, train accuracy: 98.30%\n",
      "test loss: 0.3133, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 161/200\n",
      "train loss: 0.0951, train accuracy: 98.30%\n",
      "test loss: 0.3165, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 162/200\n",
      "train loss: 0.0976, train accuracy: 98.10%\n",
      "test loss: 0.3119, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 163/200\n",
      "train loss: 0.0947, train accuracy: 98.20%\n",
      "test loss: 0.3237, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 164/200\n",
      "train loss: 0.1027, train accuracy: 98.00%\n",
      "test loss: 0.3388, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 165/200\n",
      "train loss: 0.0942, train accuracy: 98.00%\n",
      "test loss: 0.3482, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 166/200\n",
      "train loss: 0.0921, train accuracy: 98.00%\n",
      "test loss: 0.3104, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 167/200\n",
      "train loss: 0.0919, train accuracy: 98.00%\n",
      "test loss: 0.3187, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 168/200\n",
      "train loss: 0.0904, train accuracy: 98.10%\n",
      "test loss: 0.3163, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 169/200\n",
      "train loss: 0.0909, train accuracy: 98.10%\n",
      "test loss: 0.3258, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 170/200\n",
      "train loss: 0.0973, train accuracy: 98.20%\n",
      "test loss: 0.3304, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 171/200\n",
      "train loss: 0.1014, train accuracy: 97.40%\n",
      "test loss: 0.3400, test accuracy: 85.00%\n",
      "------------------------------\n",
      "epoch 172/200\n",
      "train loss: 0.0925, train accuracy: 97.50%\n",
      "test loss: 0.3451, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 173/200\n",
      "train loss: 0.0863, train accuracy: 98.60%\n",
      "test loss: 0.3090, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 174/200\n",
      "train loss: 0.1004, train accuracy: 97.70%\n",
      "test loss: 0.3548, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 175/200\n",
      "train loss: 0.0955, train accuracy: 97.80%\n",
      "test loss: 0.3419, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 176/200\n",
      "train loss: 0.0938, train accuracy: 97.80%\n",
      "test loss: 0.3237, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 177/200\n",
      "train loss: 0.0998, train accuracy: 97.40%\n",
      "test loss: 0.3563, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 178/200\n",
      "train loss: 0.0922, train accuracy: 98.10%\n",
      "test loss: 0.3223, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 179/200\n",
      "train loss: 0.0846, train accuracy: 98.40%\n",
      "test loss: 0.3266, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 180/200\n",
      "train loss: 0.0841, train accuracy: 98.40%\n",
      "test loss: 0.3168, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 181/200\n",
      "train loss: 0.0813, train accuracy: 98.70%\n",
      "test loss: 0.3297, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 182/200\n",
      "train loss: 0.0887, train accuracy: 97.90%\n",
      "test loss: 0.3440, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 183/200\n",
      "train loss: 0.0803, train accuracy: 98.50%\n",
      "test loss: 0.3239, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 184/200\n",
      "train loss: 0.0794, train accuracy: 98.50%\n",
      "test loss: 0.3354, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 185/200\n",
      "train loss: 0.0923, train accuracy: 98.20%\n",
      "test loss: 0.3488, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 186/200\n",
      "train loss: 0.0800, train accuracy: 98.70%\n",
      "test loss: 0.3370, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 187/200\n",
      "train loss: 0.1024, train accuracy: 97.10%\n",
      "test loss: 0.3934, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 188/200\n",
      "train loss: 0.0815, train accuracy: 98.50%\n",
      "test loss: 0.3551, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 189/200\n",
      "train loss: 0.0866, train accuracy: 98.00%\n",
      "test loss: 0.3674, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 190/200\n",
      "train loss: 0.0798, train accuracy: 98.50%\n",
      "test loss: 0.3321, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 191/200\n",
      "train loss: 0.0786, train accuracy: 98.80%\n",
      "test loss: 0.3294, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 192/200\n",
      "train loss: 0.0905, train accuracy: 98.20%\n",
      "test loss: 0.3469, test accuracy: 87.00%\n",
      "------------------------------\n",
      "epoch 193/200\n",
      "train loss: 0.0880, train accuracy: 98.10%\n",
      "test loss: 0.3659, test accuracy: 88.00%\n",
      "------------------------------\n",
      "epoch 194/200\n",
      "train loss: 0.0879, train accuracy: 98.30%\n",
      "test loss: 0.3372, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 195/200\n",
      "train loss: 0.0764, train accuracy: 98.90%\n",
      "test loss: 0.3377, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 196/200\n",
      "train loss: 0.0834, train accuracy: 98.70%\n",
      "test loss: 0.3585, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 197/200\n",
      "train loss: 0.0852, train accuracy: 98.20%\n",
      "test loss: 0.3390, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 198/200\n",
      "train loss: 0.0760, train accuracy: 99.10%\n",
      "test loss: 0.3403, test accuracy: 86.00%\n",
      "------------------------------\n",
      "epoch 199/200\n",
      "train loss: 0.0907, train accuracy: 98.00%\n",
      "test loss: 0.3555, test accuracy: 89.00%\n",
      "------------------------------\n",
      "epoch 200/200\n",
      "train loss: 0.0890, train accuracy: 98.50%\n",
      "test loss: 0.3339, test accuracy: 86.00%\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.datasets import mnist\n",
    "\n",
    "\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "x_train = x_train.astype(np.float32) / 255.0\n",
    "x_test = x_test.astype(np.float32) / 255.0\n",
    "\n",
    "\n",
    "def sigmoid(x):\n",
    "    x = np.clip(x, -500, 500) \n",
    "    return 1 / (1 + np.exp(-x))\n",
    "\n",
    "def dsigmoid(y):\n",
    "    return sigmoid(y) * (1 - sigmoid(y))\n",
    "\n",
    "def softmax(x):\n",
    "    exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))\n",
    "    return exp_x / exp_x.sum(axis=-1, keepdims=True)\n",
    "\n",
    "def loss(predictions, targets):\n",
    "    return -np.sum(targets * np.log(predictions + 1e-9)) / targets.shape[0]\n",
    "\n",
    "def one_hot_encoding(y, num_classes=10):\n",
    "    hot_y = np.zeros((len(y), num_classes))\n",
    "    for i in range(len(hot_y)):\n",
    "        hot_y[i, int(y[i])] = 1\n",
    "    return hot_y\n",
    "\n",
    "def conv2d(input, filters, b1):\n",
    "    out = np.zeros((input.shape[0], 2, 26, 26))\n",
    "\n",
    "    for i in range(26):\n",
    "        for j in range(26):\n",
    "            region = input[:, i:i+3, j:j+3]\n",
    "            out[:, :, i, j] = np.tensordot(region, filters, axes=([1, 2], [1, 2])) + b1\n",
    "    return out\n",
    "\n",
    "def avg_pool(input):\n",
    "    averaged = input.reshape(input.shape[0], 2, 13, 2, 13, 2).mean(axis=(3, 5))\n",
    "    return averaged\n",
    "\n",
    "def flatten(input):\n",
    "    batch_size = input.shape[0]\n",
    "    return input.reshape(batch_size, -1)\n",
    "\n",
    "def onebyone(input, w_onebyone, b2):\n",
    "    return np.dot(input, w_onebyone) + b2\n",
    "\n",
    "\n",
    "def d_loss(predictions, targets):\n",
    "    return predictions - targets\n",
    "\n",
    "def d_pool_out_to_sigmoid_out(pool_out_shape, d_pool_out):\n",
    "    batch_size, num_filters, output_height, output_width = pool_out_shape\n",
    "    d_sigmoid_out = np.zeros((batch_size, num_filters, output_height*2, output_width*2))\n",
    "    for b in range(batch_size):\n",
    "        for f in range(num_filters):\n",
    "            for i in range(output_height):\n",
    "                for j in range(output_width):\n",
    "                    d_sigmoid_out[b, f, i*2:(i+1)*2, j*2:(j+1)*2] = d_pool_out[b, f, i, j] / 4.0\n",
    "    return d_sigmoid_out\n",
    "\n",
    "def d_sigmoid_out_to_conv_out(sigmoid_out, d_sigmoid_out):\n",
    "    return d_sigmoid_out * dsigmoid(sigmoid_out)\n",
    "\n",
    "def d_conv_out_to_filters(x, conv_out_shape, d_conv_out):\n",
    "    batch_size, _, conv_out_height, conv_out_width = conv_out_shape\n",
    "    d_filters = np.zeros((2, 3, 3))\n",
    "    for b in range(batch_size):\n",
    "        for f in range(2):\n",
    "            for i in range(conv_out_height):\n",
    "                for j in range(conv_out_width):\n",
    "                    d_filters[f] += x[b, i:i + 3, j:j + 3] * d_conv_out[b, f, i, j]\n",
    "    return d_filters\n",
    "\n",
    "def d_conv_out_to_b1(d_conv_out):\n",
    "    return np.sum(d_conv_out, axis=(0, 2, 3))\n",
    "\n",
    "class cnn:\n",
    "    def __init__(self):\n",
    "        self.filters = np.random.randn(2, 3, 3) * 0.1\n",
    "        self.b1 = np.random.randn(2) * 0.1\n",
    "        self.w_onebyone = np.random.randn(338, 10) * np.sqrt(2 / (338 + 10))  # xavier initialization\n",
    "        self.b2 = np.zeros(10)\n",
    "\n",
    "    def forward(self, x):\n",
    "        self.x = x\n",
    "        # print(self.x.shape)\n",
    "        self.conv_out = conv2d(x, self.filters, self.b1)\n",
    "        # print(self.conv_out.shape)\n",
    "        self.sigmoid_out = sigmoid(self.conv_out)\n",
    "        # print(self.sigmoid_out.shape)\n",
    "        self.pool_out = avg_pool(self.sigmoid_out)\n",
    "        # print(self.pool_out.shape)\n",
    "        self.flatten_out = flatten(self.pool_out)\n",
    "        # print(self.flatten_out.shape)\n",
    "        self.out_onebyone = onebyone(self.flatten_out, self.w_onebyone, self.b2)\n",
    "        # print(self.out_onebyone.shape)\n",
    "        self.out = softmax(self.out_onebyone)\n",
    "        # print(self.out.shape)\n",
    "        return self.out\n",
    "\n",
    "    def backward(self, predictions, targets):\n",
    "        d_out = d_loss(predictions, targets)  \n",
    "\n",
    "        d_w_onebyone = np.dot(self.flatten_out.T, d_out)\n",
    "        d_b2 = np.sum(d_out, axis=0)\n",
    "        d_flatten_out = np.dot(d_out, self.w_onebyone.T)\n",
    "\n",
    "        d_pool_out = d_flatten_out.reshape(self.pool_out.shape)\n",
    "\n",
    "        d_sigmoid_out = d_pool_out_to_sigmoid_out(self.pool_out.shape, d_pool_out)\n",
    "\n",
    "        d_conv_out = d_sigmoid_out_to_conv_out(self.conv_out, d_sigmoid_out)\n",
    "\n",
    "        d_filters = d_conv_out_to_filters(self.x, self.conv_out.shape, d_conv_out)\n",
    "        d_b1 = d_conv_out_to_b1(d_conv_out)\n",
    "\n",
    "        return d_filters, d_b1, d_w_onebyone, d_b2\n",
    "\n",
    "    def update_parameters(self, d_filters, d_b1, d_w_onebyone, d_b2, learning_rate=0.01):\n",
    "        self.filters -= learning_rate * d_filters\n",
    "        self.b1 -= learning_rate * d_b1\n",
    "        self.w_onebyone -= learning_rate * d_w_onebyone\n",
    "        self.b2 -= learning_rate * d_b2\n",
    "\n",
    "def accuracy(predictions, targets):\n",
    "    y_pred = np.argmax(predictions, axis=1)\n",
    "    y_true = np.argmax(targets, axis=1)\n",
    "    return np.mean(y_pred == y_true) * 100  \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def train(cnn, x_train, y_train, x_test, y_test, epochs=20, batch_size=64, learning_rate=0.01, early_stop_patience=10):\n",
    "    y_train = one_hot_encoding(y_train, num_classes=10)\n",
    "    y_test = one_hot_encoding(y_test, num_classes=10)\n",
    "    \n",
    "    train_accs, test_accs = [], []\n",
    "    best_test_acc = 0\n",
    "    patience_counter = 0\n",
    "\n",
    "    for epoch in range(epochs):\n",
    "        perm = np.random.permutation(len(x_train))\n",
    "        x_train_shuffled = x_train[perm]\n",
    "        y_train_shuffled = y_train[perm]\n",
    "\n",
    "        for start in range(0, len(x_train), batch_size):\n",
    "            end = start + batch_size\n",
    "            batch_images = x_train_shuffled[start:end]\n",
    "            batch_labels = y_train_shuffled[start:end]\n",
    "\n",
    "            predictions = cnn.forward(batch_images)\n",
    "            d_filters, d_b1, d_w_onebyone, d_b2 = cnn.backward(predictions, batch_labels)\n",
    "            cnn.update_parameters(d_filters, d_b1, d_w_onebyone, d_b2, learning_rate)\n",
    "        \n",
    "        # train_eval\n",
    "        train_predictions = cnn.forward(x_train)\n",
    "        train_loss = loss(train_predictions, y_train)\n",
    "        train_acc = accuracy(train_predictions, y_train)\n",
    "        \n",
    "        # test_eval\n",
    "        test_predictions = cnn.forward(x_test)\n",
    "        test_loss = loss(test_predictions, y_test)\n",
    "        test_acc = accuracy(test_predictions, y_test)\n",
    "        \n",
    "        train_accs.append(train_acc)\n",
    "        test_accs.append(test_acc)\n",
    "\n",
    "        print(f\"epoch {epoch + 1}/{epochs}\")\n",
    "        print(f\"train loss: {train_loss:.4f}, train accuracy: {train_acc:.2f}%\")\n",
    "        print(f\"test loss: {test_loss:.4f}, test accuracy: {test_acc:.2f}%\")\n",
    "        print(\"-\" * 30)\n",
    "\n",
    "        # early_stopping\n",
    "        if test_acc > best_test_acc:\n",
    "            best_test_acc = test_acc\n",
    "            patience_counter = 0\n",
    "        else:\n",
    "            patience_counter += 1\n",
    "\n",
    "        if patience_counter >= early_stop_patience:\n",
    "            print(\"early stopping triggered\")\n",
    "            break\n",
    "    \n",
    "    plt.figure(figsize=(10, 5))\n",
    "    plt.plot(range(1, len(train_accs) + 1), train_accs, label='Train Accuracy')\n",
    "    plt.plot(range(1, len(test_accs) + 1), test_accs, label='Test Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy (%)')\n",
    "\n",
    "cnn_model7 = cnn()\n",
    "train(cnn_model7, x_train[:1000], y_train[:1000], x_test[:100], y_test[:100], epochs=200, batch_size=64, learning_rate=0.01, early_stop_patience=200)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4095f8a6-691f-4a1a-9d0d-263956d91466",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 1/50\n",
      "train loss: 0.3733, train accuracy: 88.38%\n",
      "test loss: 0.3588, test accuracy: 89.09%\n",
      "------------------------------\n",
      "epoch 2/50\n",
      "train loss: 0.3230, train accuracy: 90.24%\n",
      "test loss: 0.3080, test accuracy: 90.84%\n",
      "------------------------------\n",
      "epoch 3/50\n",
      "train loss: 0.3275, train accuracy: 89.70%\n",
      "test loss: 0.3179, test accuracy: 90.21%\n",
      "------------------------------\n",
      "epoch 4/50\n",
      "train loss: 0.3088, train accuracy: 90.73%\n",
      "test loss: 0.3043, test accuracy: 90.96%\n",
      "------------------------------\n",
      "epoch 5/50\n",
      "train loss: 0.2277, train accuracy: 93.14%\n",
      "test loss: 0.2181, test accuracy: 93.76%\n",
      "------------------------------\n",
      "epoch 6/50\n",
      "train loss: 0.1839, train accuracy: 94.57%\n",
      "test loss: 0.1771, test accuracy: 94.85%\n",
      "------------------------------\n",
      "epoch 7/50\n",
      "train loss: 0.1667, train accuracy: 95.13%\n",
      "test loss: 0.1624, test accuracy: 95.18%\n",
      "------------------------------\n",
      "epoch 8/50\n",
      "train loss: 0.1462, train accuracy: 95.62%\n",
      "test loss: 0.1403, test accuracy: 95.80%\n",
      "------------------------------\n",
      "epoch 9/50\n",
      "train loss: 0.1532, train accuracy: 95.34%\n",
      "test loss: 0.1460, test accuracy: 95.58%\n",
      "------------------------------\n",
      "epoch 10/50\n",
      "train loss: 0.1356, train accuracy: 95.89%\n",
      "test loss: 0.1312, test accuracy: 95.98%\n",
      "------------------------------\n",
      "epoch 11/50\n",
      "train loss: 0.1305, train accuracy: 96.03%\n",
      "test loss: 0.1230, test accuracy: 96.44%\n",
      "------------------------------\n",
      "epoch 12/50\n",
      "train loss: 0.1261, train accuracy: 96.23%\n",
      "test loss: 0.1216, test accuracy: 96.42%\n",
      "------------------------------\n",
      "epoch 13/50\n",
      "train loss: 0.1458, train accuracy: 95.53%\n",
      "test loss: 0.1388, test accuracy: 95.73%\n",
      "------------------------------\n",
      "epoch 14/50\n",
      "train loss: 0.1239, train accuracy: 96.19%\n",
      "test loss: 0.1186, test accuracy: 96.45%\n",
      "------------------------------\n",
      "epoch 15/50\n",
      "train loss: 0.1257, train accuracy: 96.13%\n",
      "test loss: 0.1212, test accuracy: 96.46%\n",
      "------------------------------\n",
      "epoch 16/50\n",
      "train loss: 0.1288, train accuracy: 96.05%\n",
      "test loss: 0.1283, test accuracy: 96.18%\n",
      "------------------------------\n",
      "epoch 17/50\n",
      "train loss: 0.1135, train accuracy: 96.54%\n",
      "test loss: 0.1089, test accuracy: 96.70%\n",
      "------------------------------\n",
      "epoch 18/50\n",
      "train loss: 0.1108, train accuracy: 96.67%\n",
      "test loss: 0.1072, test accuracy: 96.79%\n",
      "------------------------------\n",
      "epoch 19/50\n",
      "train loss: 0.1156, train accuracy: 96.50%\n",
      "test loss: 0.1126, test accuracy: 96.60%\n",
      "------------------------------\n",
      "epoch 20/50\n",
      "train loss: 0.1194, train accuracy: 96.30%\n",
      "test loss: 0.1156, test accuracy: 96.33%\n",
      "------------------------------\n",
      "epoch 21/50\n",
      "train loss: 0.1081, train accuracy: 96.65%\n",
      "test loss: 0.1012, test accuracy: 96.85%\n",
      "------------------------------\n",
      "epoch 22/50\n",
      "train loss: 0.1213, train accuracy: 96.13%\n",
      "test loss: 0.1112, test accuracy: 96.57%\n",
      "------------------------------\n",
      "epoch 23/50\n",
      "train loss: 0.1107, train accuracy: 96.58%\n",
      "test loss: 0.1078, test accuracy: 96.57%\n",
      "------------------------------\n",
      "epoch 24/50\n",
      "train loss: 0.1120, train accuracy: 96.61%\n",
      "test loss: 0.1097, test accuracy: 96.55%\n",
      "------------------------------\n",
      "epoch 25/50\n",
      "train loss: 0.1015, train accuracy: 97.03%\n",
      "test loss: 0.1000, test accuracy: 96.96%\n",
      "------------------------------\n",
      "epoch 26/50\n",
      "train loss: 0.1035, train accuracy: 96.91%\n",
      "test loss: 0.1002, test accuracy: 97.05%\n",
      "------------------------------\n",
      "epoch 27/50\n",
      "train loss: 0.1066, train accuracy: 96.84%\n",
      "test loss: 0.1092, test accuracy: 96.85%\n",
      "------------------------------\n",
      "epoch 28/50\n",
      "train loss: 0.1017, train accuracy: 96.95%\n",
      "test loss: 0.0981, test accuracy: 96.88%\n",
      "------------------------------\n",
      "epoch 29/50\n",
      "train loss: 0.1030, train accuracy: 96.84%\n",
      "test loss: 0.0997, test accuracy: 96.97%\n",
      "------------------------------\n",
      "epoch 30/50\n",
      "train loss: 0.1113, train accuracy: 96.66%\n",
      "test loss: 0.1102, test accuracy: 96.64%\n",
      "------------------------------\n",
      "epoch 31/50\n",
      "train loss: 0.0981, train accuracy: 96.99%\n",
      "test loss: 0.0977, test accuracy: 96.89%\n",
      "------------------------------\n",
      "epoch 32/50\n",
      "train loss: 0.1021, train accuracy: 96.80%\n",
      "test loss: 0.1057, test accuracy: 96.80%\n",
      "------------------------------\n",
      "epoch 33/50\n",
      "train loss: 0.1017, train accuracy: 96.99%\n",
      "test loss: 0.1046, test accuracy: 96.87%\n",
      "------------------------------\n",
      "epoch 34/50\n",
      "train loss: 0.0974, train accuracy: 97.02%\n",
      "test loss: 0.0966, test accuracy: 96.96%\n",
      "------------------------------\n",
      "epoch 35/50\n",
      "train loss: 0.1020, train accuracy: 96.91%\n",
      "test loss: 0.1018, test accuracy: 96.82%\n",
      "------------------------------\n",
      "epoch 36/50\n",
      "train loss: 0.0949, train accuracy: 97.10%\n",
      "test loss: 0.0976, test accuracy: 96.99%\n",
      "------------------------------\n",
      "epoch 37/50\n",
      "train loss: 0.1035, train accuracy: 96.84%\n",
      "test loss: 0.1039, test accuracy: 96.63%\n",
      "------------------------------\n",
      "epoch 38/50\n",
      "train loss: 0.0938, train accuracy: 97.10%\n",
      "test loss: 0.0920, test accuracy: 97.17%\n",
      "------------------------------\n",
      "epoch 39/50\n",
      "train loss: 0.0977, train accuracy: 96.98%\n",
      "test loss: 0.0966, test accuracy: 97.02%\n",
      "------------------------------\n",
      "epoch 40/50\n",
      "train loss: 0.0921, train accuracy: 97.25%\n",
      "test loss: 0.0936, test accuracy: 97.23%\n",
      "------------------------------\n",
      "epoch 41/50\n",
      "train loss: 0.0983, train accuracy: 97.07%\n",
      "test loss: 0.1008, test accuracy: 96.90%\n",
      "------------------------------\n",
      "epoch 42/50\n",
      "train loss: 0.0950, train accuracy: 97.07%\n",
      "test loss: 0.0972, test accuracy: 97.01%\n",
      "------------------------------\n",
      "epoch 43/50\n",
      "train loss: 0.0954, train accuracy: 97.08%\n",
      "test loss: 0.0951, test accuracy: 97.11%\n",
      "------------------------------\n",
      "epoch 44/50\n",
      "train loss: 0.0945, train accuracy: 97.04%\n",
      "test loss: 0.0912, test accuracy: 97.26%\n",
      "------------------------------\n",
      "epoch 45/50\n",
      "train loss: 0.0940, train accuracy: 97.17%\n",
      "test loss: 0.0952, test accuracy: 97.18%\n",
      "------------------------------\n",
      "epoch 46/50\n",
      "train loss: 0.0975, train accuracy: 96.96%\n",
      "test loss: 0.0990, test accuracy: 96.89%\n",
      "------------------------------\n",
      "epoch 47/50\n",
      "train loss: 0.0981, train accuracy: 97.00%\n",
      "test loss: 0.0996, test accuracy: 96.95%\n",
      "------------------------------\n",
      "epoch 48/50\n",
      "train loss: 0.0933, train accuracy: 97.20%\n",
      "test loss: 0.0974, test accuracy: 97.06%\n",
      "------------------------------\n",
      "epoch 49/50\n",
      "train loss: 0.0904, train accuracy: 97.33%\n",
      "test loss: 0.0928, test accuracy: 97.23%\n",
      "------------------------------\n",
      "epoch 50/50\n",
      "train loss: 0.0910, train accuracy: 97.21%\n",
      "test loss: 0.0958, test accuracy: 97.09%\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnn_model8 = cnn()\n",
    "train(cnn_model8, x_train, y_train, x_test, y_test, epochs=50, batch_size=64, learning_rate=0.01, early_stop_patience=200)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
